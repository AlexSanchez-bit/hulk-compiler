>>> Building Lexer...
>>> Tokenizing..

       print("hello world");
       
print("hello world");
       
("hello world");
       
"hello world");
       
);
       
;
       

       
>>> Cleaning tokens...
>>> Done !
['print', '(', '"hello world"', ')', ';', '$']
['ID', '(', 'string', ')', ';', '$']
>>> Parsing...
0 	 <expression> -> .<aritmetic-operation>, {';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <conditional> -> .<full-conditional>, {';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {';'}
	 <inst> -> .<var-asign>, {';'}
	 S' -> .<program>, {'$'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'}
	 <inst-wrapper> -> .<inst>;, {'$'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {';'}
	 <scope> -> .{}, {';'}
	 <program> -> .<inst-list>, {'$'}
	 <aritmetic-operation> -> .<factor>, {';'}
	 <for-loop> -> .for(ID<iterable-expression>)<scope>, {';'}
	 <conditional> -> .<inline-conditional>, {';'}
	 <inst> -> .<var-dec>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression>, {';'}
	 <flux-control> -> .<conditional>, {';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <inst> -> .<scope>, {';'}
	 <while-loop> -> .while(<conditional-expresssion>)<scope>, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression><else-statement>, {';'}
	 <flux-control> -> .<while-loop>, {';'}
	 <inst> -> .<flux-control>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}<else-statement>, {';'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <inst> -> .<expression>, {';'}
	 <var-dec> -> .let<vat-init-list>in<var-decl-expr>, {';'}
	 <scope> -> .{<inst-list>}, {';'}
	 <inst-list> -> .<inst-wrapper>, {'$'}
	 <flux-control> -> .<for-loop>, {';'}
	 <var-asign> -> .ID:=<expression>, {';'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'} 

1 	 <while-loop> -> while.(<conditional-expresssion>)<scope>, {';'} 

2 	 <conditional-expresssion> -> .<condition>&<conditional-expresssion>, {')'}
	 <comparation> -> .<expression><<expression>, {'&', ')', '|'}
	 <comparation> -> .<expression>><expression>, {')', '|', '&'}
	 <condition> -> .<boolean-value>, {')', '|', '&'}
	 <comparation> -> .<expression>>=<expression>, {'&', ')', '|'}
	 <condition> -> .<comparation>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <conditional-expresssion> -> .<condition>, {')'}
	 <comparation> -> .<expression>==<expression>, {')', '|', '&'}
	 <boolean-value> -> .false, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <conditional-expresssion> -> .!<condition>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <comparation> -> .<expression>!=<expression>, {')', '|', '&'}
	 <function-call> -> .ID(), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <comparation> -> .<expression>=<<expression>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <while-loop> -> while(.<conditional-expresssion>)<scope>, {';'}
	 <atom> -> .ID, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .(<conditional-expresssion>), {'&', ')', '|'}
	 <conditional-expresssion> -> .<condition>|<conditional-expresssion>, {')'}
	 <boolean-value> -> .true, {'&', ')', '|'} 

3 	 <atom> -> ID., {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <function-call> -> ID.(), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> ID.(<param-list>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

4 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <function-call> -> ID(.), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <function-call> -> ID(.<param-list>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

5 	 <var-method> -> ID..ID(), {')', ',', '@'}
	 <function-call> -> ID.(<param-list>), {'-', ')', '*', '/', ',', '@', '+'}
	 <string-atom> -> ID., {'@', ')', ','}
	 <var-method> -> ID..ID(<param-list>), {')', ',', '@'}
	 <function-call> -> ID.(), {'-', ')', '*', '/', ',', '@', '+'}
	 <atom> -> ID., {'-', '*', '/', ',', ')', '+'}
	 <var-attr> -> ID..ID, {'@', ')', ','} 

6 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> ID(.<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <function-call> -> ID(.), {'-', '*', '@', '/', ',', ')', '+'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

7 	 <atom> -> number., {'-', '*', '/', ',', ')', '+'} 

8 	 <string-atom> -> .<function-call>, {')', '@'}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ')', '+'}
	 <var-method> -> .ID.ID(<param-list>), {')', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <string-operation> -> .<string-atom>@<string-operation>, {')'}
	 <string-operation> -> .<string-atom>, {')'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ')', '+'}
	 <var-attr> -> .ID.ID, {')', '@'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <string-atom> -> .(<string-operation>), {'@', ')'}
	 <factor> -> .<atom>, {')', '+', '-'}
	 <string-atom> -> (.<string-operation>), {'@', ')', ','}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <string-atom> -> .string, {')', '@'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <var-method> -> .ID.ID(), {')', '@'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <string-atom> -> .ID, {')', '@'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '/', ',', ')', '+'} 

9 	 <function-call> -> ID.(<param-list>), {'-', '*', '@', '/', ')', '+'}
	 <var-method> -> ID..ID(), {')', '@'}
	 <var-attr> -> ID..ID, {')', '@'}
	 <function-call> -> ID.(), {'-', '*', '@', '/', ')', '+'}
	 <string-atom> -> ID., {')', '@'}
	 <var-method> -> ID..ID(<param-list>), {')', '@'}
	 <atom> -> ID., {'-', '*', '/', ')', '+'} 

10 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <function-call> -> ID(.<param-list>), {'-', '*', '@', '/', ')', '+'}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> ID(.), {'-', '*', '@', '/', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

11 	 <function-call> -> ID()., {'-', '*', '@', '/', ')', '+'} 

12 	 <string-atom> -> string., {')', ',', '@'} 

13 	 <param-list> -> <param>.,<param-list>, {')'}
	 <param-list> -> <param>., {')'} 

14 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <param-list> -> <param>,.<param-list>, {')'}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

15 	 <param> -> <expression>., {')', ','} 

16 	 <expression> -> <aritmetic-operation>., {')', ','} 

17 	 <aritmetic-operation> -> <factor>., {')', ','}
	 <aritmetic-operation> -> <factor>.-<aritmetic-operation>, {')', ','}
	 <aritmetic-operation> -> <factor>.+<aritmetic-operation>, {')', ','} 

18 	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '+', ')', ','}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', ',', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <factor> -> .<atom>/<factor>, {'-', ')', '+', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <function-call> -> .ID(), {'-', '*', '/', '+', ')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <aritmetic-operation> -> <factor>+.<aritmetic-operation>, {')', ','}
	 <atom> -> .ID, {'-', '*', '/', '+', ')', ','}
	 <factor> -> .<atom>, {'-', ')', '+', ','} 

19 	 <function-call> -> ID.(<param-list>), {'-', '*', '/', ',', ')', '+'}
	 <atom> -> ID., {'-', '*', '/', ',', ')', '+'}
	 <function-call> -> ID.(), {'-', '*', '/', ',', ')', '+'} 

20 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <function-call> -> ID(.<param-list>), {'-', '*', '/', ',', ')', '+'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <function-call> -> ID(.), {'-', '*', '/', ',', ')', '+'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

21 	 <function-call> -> ID()., {'-', '*', '/', ',', ')', '+'} 

22 	 <factor> -> <atom>./<factor>, {')', '+', '-', ','}
	 <factor> -> <atom>.*<factor>, {')', '+', '-', ','}
	 <factor> -> <atom>., {')', '+', '-', ','} 

23 	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '+', ')', ','}
	 <atom> -> .number, {'-', '*', '/', ',', ')', '+'}
	 <factor> -> <atom>*.<factor>, {')', '+', '-', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ',', ')', '+'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <function-call> -> .ID(), {'-', '*', '/', ',', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

24 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '/', ',', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

25 	 <function-call> -> ID.(<param-list>), {'-', '*', '/', ')', '+'}
	 <atom> -> ID., {'-', '*', '/', ')', '+'}
	 <function-call> -> ID.(), {'-', '*', '/', ')', '+'} 

26 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <function-call> -> ID(.<param-list>), {'-', '*', '/', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <function-call> -> ID(.), {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

27 	 <function-call> -> ID()., {'-', '*', '/', ')', '+'} 

28 	 <param> -> <string-operation>., {')', ','} 

29 	 <string-operation> -> <string-atom>., {')', ','}
	 <string-operation> -> <string-atom>.@<string-operation>, {')', ','} 

30 	 <function-call> -> .ID(), {'@', ')', ','}
	 <var-method> -> .ID.ID(<param-list>), {'@', ')', ','}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <string-atom> -> .string, {'@', ')', ','}
	 <string-atom> -> .<function-call>, {'@', ')', ','}
	 <string-operation> -> <string-atom>@.<string-operation>, {')', ','}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <var-method> -> .ID.ID(), {'@', ')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <function-call> -> .ID(<param-list>), {'@', ')', ','}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','} 

31 	 <function-call> -> ID.(<param-list>), {'@', ')', ','}
	 <function-call> -> ID.(), {'@', ')', ','}
	 <var-method> -> ID..ID(), {'@', ')', ','}
	 <string-atom> -> ID., {'@', ')', ','}
	 <var-method> -> ID..ID(<param-list>), {'@', ')', ','}
	 <var-attr> -> ID..ID, {'@', ')', ','} 

32 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <function-call> -> ID(.), {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <function-call> -> ID(.<param-list>), {'@', ')', ','}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

33 	 <function-call> -> ID()., {'@', ')', ','} 

34 	 <string-atom> -> <function-call>., {')', '@', ','}
	 <atom> -> <function-call>., {'-', '*', '/', ',', ')', '+'} 

35 	 <function-call> -> ID(<param-list>.), {'@', ')', ','} 

36 	 <function-call> -> ID(<param-list>)., {'@', ')', ','} 

37 	 <string-atom> -> <var-attr>., {'@', ')', ','} 

38 	 <string-atom> -> <var-method>., {'@', ')', ','} 

39 	 <var-method> -> ID..ID(<param-list>), {'@', ')', ','}
	 <var-attr> -> ID..ID, {'@', ')', ','}
	 <var-method> -> ID..ID(), {'@', ')', ','} 

40 	 <var-method> -> ID.ID.(), {'@', ')', ','}
	 <var-method> -> ID.ID.(<param-list>), {'@', ')', ','}
	 <var-attr> -> ID.ID., {'@', ')', ','} 

41 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <var-method> -> ID.ID(.), {'@', ')', ','}
	 <var-method> -> ID.ID(.<param-list>), {'@', ')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

42 	 <var-method> -> ID.ID()., {'@', ')', ','} 

43 	 <var-method> -> ID.ID(<param-list>.), {'@', ')', ','} 

44 	 <var-method> -> ID.ID(<param-list>)., {'@', ')', ','} 

45 	 <string-atom> -> .<function-call>, {')', '@'}
	 <var-method> -> .ID.ID(<param-list>), {')', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')'}
	 <string-atom> -> .string, {'@', ')'}
	 <string-operation> -> .<string-atom>@<string-operation>, {')'}
	 <string-operation> -> .<string-atom>, {')'}
	 <function-call> -> .ID(<param-list>), {')', '@'}
	 <string-atom> -> .<var-method>, {'@', ')'}
	 <var-method> -> .ID.ID(), {'@', ')'}
	 <string-atom> -> .ID, {')', '@'}
	 <var-attr> -> .ID.ID, {')', '@'}
	 <string-atom> -> .(<string-operation>), {'@', ')'}
	 <string-atom> -> (.<string-operation>), {'@', ')', ','}
	 <function-call> -> .ID(), {'@', ')'} 

46 	 <function-call> -> ID.(), {'@', ')'}
	 <var-method> -> ID..ID(), {'@', ')'}
	 <var-attr> -> ID..ID, {')', '@'}
	 <string-atom> -> ID., {')', '@'}
	 <var-method> -> ID..ID(<param-list>), {')', '@'}
	 <function-call> -> ID.(<param-list>), {')', '@'} 

47 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <function-call> -> ID(.), {'@', ')'}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <function-call> -> ID(.<param-list>), {')', '@'}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

48 	 <function-call> -> ID()., {'@', ')'} 

49 	 <function-call> -> ID(<param-list>.), {')', '@'} 

50 	 <function-call> -> ID(<param-list>)., {')', '@'} 

51 	 <var-method> -> ID..ID(<param-list>), {')', '@'}
	 <var-attr> -> ID..ID, {')', '@'}
	 <var-method> -> ID..ID(), {'@', ')'} 

52 	 <var-method> -> ID.ID.(), {'@', ')'}
	 <var-method> -> ID.ID.(<param-list>), {')', '@'}
	 <var-attr> -> ID.ID., {')', '@'} 

53 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <var-method> -> ID.ID(.), {'@', ')'}
	 <param> -> .<expression>, {')', ','}
	 <var-method> -> ID.ID(.<param-list>), {')', '@'}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

54 	 <var-method> -> ID.ID()., {'@', ')'} 

55 	 <var-method> -> ID.ID(<param-list>.), {')', '@'} 

56 	 <var-method> -> ID.ID(<param-list>)., {')', '@'} 

57 	 <string-atom> -> .<function-call>, {')', '@'}
	 <var-method> -> .ID.ID(<param-list>), {')', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')'}
	 <string-atom> -> .string, {'@', ')'}
	 <string-operation> -> .<string-atom>@<string-operation>, {')'}
	 <string-operation> -> .<string-atom>, {')'}
	 <function-call> -> .ID(<param-list>), {')', '@'}
	 <string-atom> -> .<var-method>, {'@', ')'}
	 <var-method> -> .ID.ID(), {'@', ')'}
	 <string-atom> -> .ID, {')', '@'}
	 <var-attr> -> .ID.ID, {')', '@'}
	 <string-atom> -> .(<string-operation>), {'@', ')'}
	 <string-atom> -> (.<string-operation>), {'@', ')'}
	 <function-call> -> .ID(), {'@', ')'} 

58 	 <string-atom> -> string., {'@', ')'} 

59 	 <string-atom> -> (<string-operation>.), {'@', ')'} 

60 	 <string-atom> -> (<string-operation>)., {'@', ')'} 

61 	 <string-operation> -> <string-atom>.@<string-operation>, {')'}
	 <string-operation> -> <string-atom>., {')'} 

62 	 <string-atom> -> .<function-call>, {')', '@'}
	 <string-operation> -> <string-atom>@.<string-operation>, {')'}
	 <var-method> -> .ID.ID(<param-list>), {')', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')'}
	 <string-atom> -> .string, {'@', ')'}
	 <string-operation> -> .<string-atom>@<string-operation>, {')'}
	 <string-operation> -> .<string-atom>, {')'}
	 <function-call> -> .ID(<param-list>), {')', '@'}
	 <string-atom> -> .<var-method>, {'@', ')'}
	 <var-method> -> .ID.ID(), {'@', ')'}
	 <string-atom> -> .ID, {')', '@'}
	 <var-attr> -> .ID.ID, {')', '@'}
	 <string-atom> -> .(<string-operation>), {'@', ')'}
	 <function-call> -> .ID(), {'@', ')'} 

63 	 <string-operation> -> <string-atom>@<string-operation>., {')'} 

64 	 <string-atom> -> <function-call>., {')', '@'} 

65 	 <string-atom> -> <var-attr>., {'@', ')'} 

66 	 <string-atom> -> <var-method>., {'@', ')'} 

67 	 <string-atom> -> (<string-operation>.), {'@', ')', ','} 

68 	 <string-atom> -> (<string-operation>)., {'@', ')', ','} 

69 	 <string-operation> -> <string-atom>@<string-operation>., {')', ','} 

70 	 <string-atom> -> <function-call>., {'@', ')', ','} 

71 	 <function-call> -> ID(<param-list>.), {'-', '*', '/', ')', '+'} 

72 	 <function-call> -> ID(<param-list>)., {'-', '*', '/', ')', '+'} 

73 	 <atom> -> number., {'-', '*', '/', ')', '+'} 

74 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

75 	 <atom> -> (<aritmetic-operation>.), {'-', '*', '/', ')', '+'} 

76 	 <atom> -> (<aritmetic-operation>)., {'-', '*', '/', ')', '+'} 

77 	 <aritmetic-operation> -> <factor>.-<aritmetic-operation>, {')'}
	 <aritmetic-operation> -> <factor>., {')'}
	 <aritmetic-operation> -> <factor>.+<aritmetic-operation>, {')'} 

78 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> <factor>+.<aritmetic-operation>, {')'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

79 	 <aritmetic-operation> -> <factor>+<aritmetic-operation>., {')'} 

80 	 <factor> -> <atom>.*<factor>, {')', '+', '-'}
	 <factor> -> <atom>., {')', '+', '-'}
	 <factor> -> <atom>./<factor>, {')', '+', '-'} 

81 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <factor> -> <atom>*.<factor>, {')', '+', '-'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

82 	 <factor> -> <atom>*<factor>., {')', '+', '-'} 

83 	 <atom> -> <function-call>., {'-', '*', '/', ')', '+'} 

84 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> <atom>/.<factor>, {')', '+', '-'}
	 <factor> -> .<atom>, {')', '+', '-'} 

85 	 <factor> -> <atom>/<factor>., {')', '+', '-'} 

86 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <aritmetic-operation> -> <factor>-.<aritmetic-operation>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

87 	 <aritmetic-operation> -> <factor>-<aritmetic-operation>., {')'} 

88 	 <atom> -> (<aritmetic-operation>.), {'-', '*', '/', ',', ')', '+'} 

89 	 <atom> -> (<aritmetic-operation>)., {'-', '*', '/', ',', ')', '+'} 

90 	 <factor> -> <atom>*<factor>., {')', '+', '-', ','} 

91 	 <atom> -> <function-call>., {'-', '*', '/', ',', ')', '+'} 

92 	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '+', ')', ','}
	 <atom> -> .number, {'-', '*', '/', ',', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ',', ')', '+'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <function-call> -> .ID(), {'-', '*', '/', ',', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <factor> -> <atom>/.<factor>, {')', '+', '-', ','}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

93 	 <factor> -> <atom>/<factor>., {')', '+', '-', ','} 

94 	 <function-call> -> ID(<param-list>.), {'-', '*', '/', ',', ')', '+'} 

95 	 <function-call> -> ID(<param-list>)., {'-', '*', '/', ',', ')', '+'} 

96 	 <aritmetic-operation> -> <factor>+<aritmetic-operation>., {')', ','} 

97 	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '+', ')', ','}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', ',', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <factor> -> .<atom>/<factor>, {'-', ')', '+', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <aritmetic-operation> -> <factor>-.<aritmetic-operation>, {')', ','}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <function-call> -> .ID(), {'-', '*', '/', '+', ')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .ID, {'-', '*', '/', '+', ')', ','}
	 <factor> -> .<atom>, {'-', ')', '+', ','} 

98 	 <aritmetic-operation> -> <factor>-<aritmetic-operation>., {')', ','} 

99 	 <param-list> -> <param>,<param-list>., {')'} 

100 	 <function-call> -> ID(<param-list>.), {'-', '*', '@', '/', ')', '+'} 

101 	 <function-call> -> ID(<param-list>)., {'-', '*', '@', '/', ')', '+'} 

102 	 <string-atom> -> .<function-call>, {')', '@'}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ')', '+'}
	 <var-method> -> .ID.ID(<param-list>), {')', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <string-operation> -> .<string-atom>@<string-operation>, {')'}
	 <string-operation> -> .<string-atom>, {')'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ')', '+'}
	 <var-attr> -> .ID.ID, {')', '@'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <string-atom> -> .(<string-operation>), {'@', ')'}
	 <string-atom> -> (.<string-operation>), {'@', ')'}
	 <factor> -> .<atom>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <string-atom> -> .string, {')', '@'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <var-method> -> .ID.ID(), {')', '@'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <string-atom> -> .ID, {')', '@'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'} 

103 	 <string-atom> -> <function-call>., {')', '@'}
	 <atom> -> <function-call>., {'-', '*', '/', ')', '+'} 

104 	 <function-call> -> ID()., {'-', ')', '*', '/', ',', '@', '+'} 

105 	 <function-call> -> ID(<param-list>.), {'-', ')', '*', '/', ',', '@', '+'} 

106 	 <function-call> -> ID(<param-list>)., {'-', '*', '@', '/', ',', ')', '+'} 

107 	 <function-call> -> ID()., {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

108 	 <function-call> -> ID(<param-list>.), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

109 	 <function-call> -> ID(<param-list>)., {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

110 	 <atom> -> number., {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

111 	 <conditional-expresssion> -> .<condition>&<conditional-expresssion>, {')'}
	 <comparation> -> .<expression><<expression>, {'&', ')', '|'}
	 <comparation> -> .<expression>><expression>, {')', '|', '&'}
	 <factor> -> .<atom>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .<boolean-value>, {')', '|', '&'}
	 <comparation> -> .<expression>>=<expression>, {'&', ')', '|'}
	 <conditional-expresssion> -> .<condition>|<conditional-expresssion>, {')'}
	 <function-call> -> .ID(), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <condition> -> .<comparation>, {')', '|', '&'}
	 <factor> -> .<atom>/<factor>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> .ID, {'-', ')', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <conditional-expresssion> -> .<condition>, {')'}
	 <comparation> -> .<expression>==<expression>, {')', '|', '&'}
	 <boolean-value> -> .false, {')', '|', '&'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <condition> -> (.<conditional-expresssion>), {'&', ')', '|'}
	 <conditional-expresssion> -> .!<condition>, {')'}
	 <comparation> -> .<expression>!=<expression>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '>', '<', '>=', '=<', '==', '!='}
	 <comparation> -> .<expression>=<<expression>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', ')', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>*<factor>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .(<conditional-expresssion>), {'&', ')', '|'}
	 <aritmetic-operation> -> .<factor>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <atom> -> .number, {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '>', '!=', '<', '>=', '/', '=<', '==', ')', '+'}
	 <boolean-value> -> .true, {')', '|', '&'} 

112 	 <function-call> -> ID.(<param-list>), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <function-call> -> ID.(), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <atom> -> ID., {'-', ')', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'} 

113 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <function-call> -> ID(.<param-list>), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <function-call> -> ID(.), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

114 	 <function-call> -> ID()., {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'} 

115 	 <function-call> -> ID(<param-list>.), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'} 

116 	 <function-call> -> ID(<param-list>)., {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'} 

117 	 <atom> -> number., {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'} 

118 	 <conditional-expresssion> -> .<condition>&<conditional-expresssion>, {')'}
	 <comparation> -> .<expression><<expression>, {'&', ')', '|'}
	 <comparation> -> .<expression>><expression>, {')', '|', '&'}
	 <factor> -> .<atom>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .<boolean-value>, {')', '|', '&'}
	 <comparation> -> .<expression>>=<expression>, {'&', ')', '|'}
	 <conditional-expresssion> -> .<condition>|<conditional-expresssion>, {')'}
	 <function-call> -> .ID(), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <condition> -> .<comparation>, {')', '|', '&'}
	 <factor> -> .<atom>/<factor>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '>', '!=', '<', '>=', '/', '=<', '==', ')', '+'}
	 <atom> -> .ID, {'-', ')', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <conditional-expresssion> -> .<condition>, {')'}
	 <comparation> -> .<expression>==<expression>, {')', '|', '&'}
	 <boolean-value> -> .false, {')', '|', '&'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <condition> -> (.<conditional-expresssion>), {'&', ')', '|'}
	 <conditional-expresssion> -> .!<condition>, {')'}
	 <comparation> -> .<expression>!=<expression>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '>', '<', '>=', '=<', '==', '!='}
	 <comparation> -> .<expression>=<<expression>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', ')', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>*<factor>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .(<conditional-expresssion>), {'&', ')', '|'}
	 <aritmetic-operation> -> .<factor>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <atom> -> .number, {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '>', '!=', '<', '>=', '/', '=<', '==', ')', '+'}
	 <boolean-value> -> .true, {')', '|', '&'} 

119 	 <condition> -> .(<conditional-expresssion>), {')'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <boolean-value> -> .true, {')'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <comparation> -> .<expression>><expression>, {')'}
	 <atom> -> .number, {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <comparation> -> .<expression><<expression>, {')'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .<boolean-value>, {')'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <conditional-expresssion> -> !.<condition>, {')'}
	 <condition> -> .<comparation>, {')'}
	 <comparation> -> .<expression>>=<expression>, {')'}
	 <comparation> -> .<expression>==<expression>, {')'}
	 <boolean-value> -> .false, {')'}
	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <comparation> -> .<expression>!=<expression>, {')'}
	 <aritmetic-operation> -> .<factor>, {'>', '<', '>=', '=<', '==', '!='}
	 <comparation> -> .<expression>=<<expression>, {')'} 

120 	 <conditional-expresssion> -> .<condition>&<conditional-expresssion>, {')'}
	 <comparation> -> .<expression><<expression>, {'&', ')', '|'}
	 <comparation> -> .<expression>><expression>, {')', '|', '&'}
	 <factor> -> .<atom>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .<boolean-value>, {')', '|', '&'}
	 <comparation> -> .<expression>>=<expression>, {'&', ')', '|'}
	 <conditional-expresssion> -> .<condition>|<conditional-expresssion>, {')'}
	 <function-call> -> .ID(), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <condition> -> (.<conditional-expresssion>), {')'}
	 <condition> -> .<comparation>, {')', '|', '&'}
	 <factor> -> .<atom>/<factor>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> .ID, {'-', ')', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <conditional-expresssion> -> .<condition>, {')'}
	 <comparation> -> .<expression>==<expression>, {')', '|', '&'}
	 <boolean-value> -> .false, {')', '|', '&'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <conditional-expresssion> -> .!<condition>, {')'}
	 <comparation> -> .<expression>!=<expression>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '>', '<', '>=', '=<', '==', '!='}
	 <comparation> -> .<expression>=<<expression>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', ')', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>*<factor>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .(<conditional-expresssion>), {'&', ')', '|'}
	 <aritmetic-operation> -> .<factor>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <atom> -> .number, {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '>', '!=', '<', '>=', '/', '=<', '==', ')', '+'}
	 <boolean-value> -> .true, {')', '|', '&'} 

121 	 <boolean-value> -> true., {'&', ')', '|'} 

122 	 <boolean-value> -> false., {')', '|', '&'} 

123 	 <comparation> -> <expression>.==<expression>, {')', '|', '&'}
	 <comparation> -> <expression>.><expression>, {')', '|', '&'}
	 <comparation> -> <expression>.<<expression>, {'&', ')', '|'}
	 <comparation> -> <expression>.>=<expression>, {'&', ')', '|'}
	 <comparation> -> <expression>.!=<expression>, {')', '|', '&'}
	 <comparation> -> <expression>.=<<expression>, {')', '|', '&'} 

124 	 <expression> -> .<aritmetic-operation>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '|', '&'}
	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>, {')', '|', '&'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <comparation> -> <expression>>.<expression>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

125 	 <atom> -> ID., {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> ID.(), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> ID.(<param-list>), {'-', '*', '/', '&', '|', ')', '+'} 

126 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <function-call> -> ID(.), {'-', '*', '/', '&', '|', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <function-call> -> ID(.<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

127 	 <function-call> -> ID()., {'-', '*', '/', '&', '|', ')', '+'} 

128 	 <function-call> -> ID(<param-list>.), {'-', '*', '/', '&', '|', ')', '+'} 

129 	 <function-call> -> ID(<param-list>)., {'-', '*', '/', '&', '|', ')', '+'} 

130 	 <atom> -> number., {'-', '*', '/', '&', '|', ')', '+'} 

131 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

132 	 <atom> -> (<aritmetic-operation>.), {'-', '*', '/', '&', '|', ')', '+'} 

133 	 <atom> -> (<aritmetic-operation>)., {'-', '*', '/', '&', '|', ')', '+'} 

134 	 <comparation> -> <expression>><expression>., {')', '|', '&'} 

135 	 <expression> -> <aritmetic-operation>., {')', '|', '&'} 

136 	 <aritmetic-operation> -> <factor>.+<aritmetic-operation>, {')', '|', '&'}
	 <aritmetic-operation> -> <factor>., {')', '|', '&'}
	 <aritmetic-operation> -> <factor>.-<aritmetic-operation>, {')', '|', '&'} 

137 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '|', '&'}
	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>, {')', '|', '&'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> <factor>+.<aritmetic-operation>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

138 	 <aritmetic-operation> -> <factor>+<aritmetic-operation>., {')', '|', '&'} 

139 	 <factor> -> <atom>., {'-', '&', '|', ')', '+'}
	 <factor> -> <atom>./<factor>, {'-', '&', '|', ')', '+'}
	 <factor> -> <atom>.*<factor>, {'-', '&', '|', ')', '+'} 

140 	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <factor> -> <atom>*.<factor>, {'-', '&', '|', ')', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

141 	 <factor> -> <atom>*<factor>., {'-', '&', '|', ')', '+'} 

142 	 <atom> -> <function-call>., {'-', '*', '/', '&', '|', ')', '+'} 

143 	 <factor> -> <atom>/.<factor>, {'-', '&', '|', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

144 	 <factor> -> <atom>/<factor>., {'-', '&', '|', ')', '+'} 

145 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '|', '&'}
	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>, {')', '|', '&'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> <factor>-.<aritmetic-operation>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

146 	 <aritmetic-operation> -> <factor>-<aritmetic-operation>., {')', '|', '&'} 

147 	 <expression> -> .<aritmetic-operation>, {'&', ')', '|'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'&', ')', '|'}
	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'&', ')', '|'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>, {'&', ')', '|'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <comparation> -> <expression><.<expression>, {'&', ')', '|'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

148 	 <comparation> -> <expression><<expression>., {'&', ')', '|'} 

149 	 <expression> -> .<aritmetic-operation>, {'&', ')', '|'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'&', ')', '|'}
	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'&', ')', '|'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>, {'&', ')', '|'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <comparation> -> <expression>>=.<expression>, {'&', ')', '|'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

150 	 <comparation> -> <expression>>=<expression>., {'&', ')', '|'} 

151 	 <expression> -> .<aritmetic-operation>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '|', '&'}
	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <comparation> -> <expression>=<.<expression>, {')', '|', '&'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>, {')', '|', '&'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

152 	 <comparation> -> <expression>=<<expression>., {')', '|', '&'} 

153 	 <expression> -> .<aritmetic-operation>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '|', '&'}
	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <comparation> -> <expression>==.<expression>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>, {')', '|', '&'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

154 	 <comparation> -> <expression>==<expression>., {')', '|', '&'} 

155 	 <expression> -> .<aritmetic-operation>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '|', '&'}
	 <atom> -> .ID, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', '&', '|', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '&', '|', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '&', '|', ')', '+'}
	 <comparation> -> <expression>!=.<expression>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '&', '|', ')', '+'}
	 <aritmetic-operation> -> .<factor>, {')', '|', '&'}
	 <factor> -> .<atom>, {'-', '&', '|', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', '&', '|', ')', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', '&', '|', ')', '+'} 

156 	 <comparation> -> <expression>!=<expression>., {')', '|', '&'} 

157 	 <expression> -> <aritmetic-operation>., {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> (<aritmetic-operation>.), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'} 

158 	 <atom> -> (<aritmetic-operation>)., {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

159 	 <aritmetic-operation> -> <factor>.-<aritmetic-operation>, {')', '>', '<', '>=', '=<', '==', '!='}
	 <aritmetic-operation> -> <factor>., {')', '>', '<', '>=', '=<', '==', '!='}
	 <aritmetic-operation> -> <factor>.+<aritmetic-operation>, {'>', '!=', '<', '>=', '=<', '==', ')'} 

160 	 <factor> -> .<atom>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', '>', '<', '>=', '=<', '==', '!='}
	 <function-call> -> .ID(), {'-', ')', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <atom> -> .<function-call>, {'-', ')', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', ')', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>*<factor>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', '>', '<', '>=', '=<', '==', '!='}
	 <function-call> -> .ID(<param-list>), {'-', ')', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>, {')', '>', '<', '>=', '=<', '==', '!='}
	 <atom> -> .number, {'-', ')', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', ')', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> <factor>+.<aritmetic-operation>, {')', '>', '<', '>=', '=<', '==', '!='} 

161 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', ')', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

162 	 <atom> -> (<aritmetic-operation>.), {'-', ')', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

163 	 <atom> -> (<aritmetic-operation>)., {'-', ')', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

164 	 <aritmetic-operation> -> <factor>+<aritmetic-operation>., {'>', '!=', '<', '>=', '=<', '==', ')'} 

165 	 <factor> -> <atom>.*<factor>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <factor> -> <atom>., {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <factor> -> <atom>./<factor>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'} 

166 	 <factor> -> .<atom>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <function-call> -> .ID(), {'-', ')', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <factor> -> <atom>*.<factor>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .<function-call>, {'-', '>', '*', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <atom> -> .ID, {'-', '>', '*', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '!=', '<', '>=', '/', '=<', '==', ')', '+'}
	 <atom> -> .number, {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'} 

167 	 <factor> -> <atom>*<factor>., {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'} 

168 	 <atom> -> <function-call>., {'-', ')', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'} 

169 	 <factor> -> <atom>/.<factor>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <factor> -> .<atom>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(), {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .<function-call>, {'-', ')', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', ')', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>*<factor>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', ')', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', ')', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', ')', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

170 	 <factor> -> <atom>/<factor>., {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'} 

171 	 <factor> -> .<atom>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <function-call> -> .ID(), {'-', '*', '>', '!=', '<', '>=', '/', '=<', '==', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', ')', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .<function-call>, {'-', '>', '*', '!=', '<', '>=', '/', '=<', '==', ')', '+'}
	 <atom> -> .ID, {'-', '>', '*', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <aritmetic-operation> -> <factor>-.<aritmetic-operation>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '!=', '<', '>=', '=<', '==', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '!=', '<', '>=', '/', '=<', '==', ')', '+'}
	 <aritmetic-operation> -> .<factor>, {'>', '!=', '<', '>=', '=<', '==', ')'}
	 <atom> -> .number, {'-', '*', '>', '!=', '<', '/', '>=', '=<', '==', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '!=', '<', '/', '>=', '=<', '==', ')', '+'} 

172 	 <aritmetic-operation> -> <factor>-<aritmetic-operation>., {')', '>', '<', '>=', '=<', '==', '!='} 

173 	 <condition> -> (<conditional-expresssion>.), {')'} 

174 	 <condition> -> (<conditional-expresssion>)., {')'} 

175 	 <conditional-expresssion> -> <condition>.&<conditional-expresssion>, {')'}
	 <conditional-expresssion> -> <condition>.|<conditional-expresssion>, {')'}
	 <conditional-expresssion> -> <condition>., {')'} 

176 	 <conditional-expresssion> -> .<condition>&<conditional-expresssion>, {')'}
	 <comparation> -> .<expression><<expression>, {'&', ')', '|'}
	 <comparation> -> .<expression>><expression>, {')', '|', '&'}
	 <conditional-expresssion> -> <condition>&.<conditional-expresssion>, {')'}
	 <condition> -> .<boolean-value>, {')', '|', '&'}
	 <comparation> -> .<expression>>=<expression>, {'&', ')', '|'}
	 <condition> -> .<comparation>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <conditional-expresssion> -> .<condition>, {')'}
	 <comparation> -> .<expression>==<expression>, {')', '|', '&'}
	 <boolean-value> -> .false, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <conditional-expresssion> -> .!<condition>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <comparation> -> .<expression>!=<expression>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <comparation> -> .<expression>=<<expression>, {')', '|', '&'}
	 <function-call> -> .ID(), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .(<conditional-expresssion>), {'&', ')', '|'}
	 <conditional-expresssion> -> .<condition>|<conditional-expresssion>, {')'}
	 <boolean-value> -> .true, {'&', ')', '|'} 

177 	 <expression> -> <aritmetic-operation>., {'>', '<', '>=', '=<', '==', '!='} 

178 	 <aritmetic-operation> -> <factor>.-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <aritmetic-operation> -> <factor>.+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <aritmetic-operation> -> <factor>., {'>', '<', '>=', '=<', '==', '!='} 

179 	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <aritmetic-operation> -> .<factor>, {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> <factor>+.<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='} 

180 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

181 	 <atom> -> (<aritmetic-operation>.), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

182 	 <aritmetic-operation> -> <factor>+<aritmetic-operation>., {'>', '<', '>=', '=<', '==', '!='} 

183 	 <factor> -> <atom>.*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <factor> -> <atom>., {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <factor> -> <atom>./<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'} 

184 	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(), {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> <atom>*.<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

185 	 <factor> -> <atom>*<factor>., {'-', '>', '<', '>=', '=<', '==', '!=', '+'} 

186 	 <atom> -> <function-call>., {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'} 

187 	 <factor> -> <atom>/.<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'} 

188 	 <factor> -> <atom>/<factor>., {'-', '>', '<', '>=', '=<', '==', '!=', '+'} 

189 	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <aritmetic-operation> -> <factor>-.<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <aritmetic-operation> -> .<factor>, {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'} 

190 	 <aritmetic-operation> -> <factor>-<aritmetic-operation>., {'>', '<', '>=', '=<', '==', '!='} 

191 	 <conditional-expresssion> -> <condition>&<conditional-expresssion>., {')'} 

192 	 <condition> -> <boolean-value>., {')', '|', '&'} 

193 	 <condition> -> <comparation>., {')', '|', '&'} 

194 	 <conditional-expresssion> -> .<condition>&<conditional-expresssion>, {')'}
	 <comparation> -> .<expression><<expression>, {'&', ')', '|'}
	 <comparation> -> .<expression>><expression>, {')', '|', '&'}
	 <condition> -> .<boolean-value>, {')', '|', '&'}
	 <comparation> -> .<expression>>=<expression>, {'&', ')', '|'}
	 <condition> -> .<comparation>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <conditional-expresssion> -> .<condition>, {')'}
	 <comparation> -> .<expression>==<expression>, {')', '|', '&'}
	 <boolean-value> -> .false, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <conditional-expresssion> -> <condition>|.<conditional-expresssion>, {')'}
	 <conditional-expresssion> -> .!<condition>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <comparation> -> .<expression>!=<expression>, {')', '|', '&'}
	 <function-call> -> .ID(), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <comparation> -> .<expression>=<<expression>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .(<conditional-expresssion>), {'&', ')', '|'}
	 <conditional-expresssion> -> .<condition>|<conditional-expresssion>, {')'}
	 <boolean-value> -> .true, {'&', ')', '|'} 

195 	 <conditional-expresssion> -> <condition>|<conditional-expresssion>., {')'} 

196 	 <boolean-value> -> true., {')'} 

197 	 <boolean-value> -> false., {')'} 

198 	 <comparation> -> <expression>.=<<expression>, {')'}
	 <comparation> -> <expression>.==<expression>, {')'}
	 <comparation> -> <expression>.><expression>, {')'}
	 <comparation> -> <expression>.<<expression>, {')'}
	 <comparation> -> <expression>.>=<expression>, {')'}
	 <comparation> -> <expression>.!=<expression>, {')'} 

199 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <comparation> -> <expression>>.<expression>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <expression> -> .<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

200 	 <comparation> -> <expression>><expression>., {')'} 

201 	 <expression> -> <aritmetic-operation>., {')'} 

202 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <comparation> -> <expression><.<expression>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <expression> -> .<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

203 	 <comparation> -> <expression><<expression>., {')'} 

204 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <comparation> -> <expression>>=.<expression>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <expression> -> .<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

205 	 <comparation> -> <expression>>=<expression>., {')'} 

206 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <comparation> -> <expression>=<.<expression>, {')'}
	 <expression> -> .<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

207 	 <comparation> -> <expression>=<<expression>., {')'} 

208 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <comparation> -> <expression>==.<expression>, {')'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <expression> -> .<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

209 	 <comparation> -> <expression>==<expression>., {')'} 

210 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <comparation> -> <expression>!=.<expression>, {')'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <expression> -> .<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

211 	 <comparation> -> <expression>!=<expression>., {')'} 

212 	 <conditional-expresssion> -> !<condition>., {')'} 

213 	 <condition> -> <boolean-value>., {')'} 

214 	 <condition> -> <comparation>., {')'} 

215 	 <expression> -> <aritmetic-operation>., {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> (<aritmetic-operation>.), {'-', '*', '>', '!=', '<', '>=', '/', '=<', '==', ')', '+'} 

216 	 <condition> -> (<conditional-expresssion>.), {'&', ')', '|'} 

217 	 <condition> -> (<conditional-expresssion>)., {'&', ')', '|'} 

218 	 <while-loop> -> while(<conditional-expresssion>.)<scope>, {';'} 

219 	 <scope> -> .{}, {';'}
	 <while-loop> -> while(<conditional-expresssion>).<scope>, {';'}
	 <scope> -> .{<inst-list>}, {';'} 

220 	 <expression> -> .<aritmetic-operation>, {';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <conditional> -> .<full-conditional>, {';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {';'}
	 <inst> -> .<var-asign>, {';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'}
	 <scope> -> {.<inst-list>}, {';'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {';'}
	 <scope> -> .{}, {';'}
	 <aritmetic-operation> -> .<factor>, {';'}
	 <for-loop> -> .for(ID<iterable-expression>)<scope>, {';'}
	 <scope> -> {.}, {';'}
	 <conditional> -> .<inline-conditional>, {';'}
	 <inst> -> .<var-dec>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression>, {';'}
	 <flux-control> -> .<conditional>, {';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <inst> -> .<scope>, {';'}
	 <inst-list> -> .<inst-wrapper>, {'}'}
	 <while-loop> -> .while(<conditional-expresssion>)<scope>, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression><else-statement>, {';'}
	 <flux-control> -> .<while-loop>, {';'}
	 <inst> -> .<flux-control>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}<else-statement>, {';'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <inst> -> .<expression>, {';'}
	 <var-dec> -> .let<vat-init-list>in<var-decl-expr>, {';'}
	 <scope> -> .{<inst-list>}, {';'}
	 <flux-control> -> .<for-loop>, {';'}
	 <var-asign> -> .ID:=<expression>, {';'}
	 <inst-wrapper> -> .<inst>;, {'}'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'} 

221 	 <for-loop> -> for.(ID<iterable-expression>)<scope>, {';'} 

222 	 <for-loop> -> for(.ID<iterable-expression>)<scope>, {';'} 

223 	 <for-loop> -> for(ID.<iterable-expression>)<scope>, {';'} 

224 	 <for-loop> -> for(ID<iterable-expression>.)<scope>, {';'} 

225 	 <for-loop> -> for(ID<iterable-expression>).<scope>, {';'}
	 <scope> -> .{<inst-list>}, {';'}
	 <scope> -> .{}, {';'} 

226 	 <for-loop> -> for(ID<iterable-expression>)<scope>., {';'} 

227 	 <scope> -> {}., {';'} 

228 	 <var-dec> -> let.<vat-init-list>in<var-decl-expr>, {';'}
	 <var-init> -> .<identifier>=<var-asign>, {'in', ','}
	 <vat-init-list> -> .<var-init>,<vat-init-list>, {'in'}
	 <vat-init-list> -> .<var-init>, {'in'}
	 <var-init> -> .<identifier>=<expression>, {'in', ','}
	 <identifier> -> .ID, {'='}
	 <identifier> -> .ID<type-anotation>, {'='} 

229 	 <type-anotation> -> .:Number, {'='}
	 <identifier> -> ID., {'='}
	 <identifier> -> ID.<type-anotation>, {'='} 

230 	 <type-anotation> -> :.Number, {'='} 

231 	 <type-anotation> -> :Number., {'='} 

232 	 <identifier> -> ID<type-anotation>., {'='} 

233 	 <vat-init-list> -> <var-init>., {'in'}
	 <vat-init-list> -> <var-init>.,<vat-init-list>, {'in'} 

234 	 <vat-init-list> -> .<var-init>, {'in'}
	 <var-init> -> .<identifier>=<var-asign>, {'in', ','}
	 <vat-init-list> -> .<var-init>,<vat-init-list>, {'in'}
	 <vat-init-list> -> <var-init>,.<vat-init-list>, {'in'}
	 <var-init> -> .<identifier>=<expression>, {'in', ','}
	 <identifier> -> .ID, {'='}
	 <identifier> -> .ID<type-anotation>, {'='} 

235 	 <vat-init-list> -> <var-init>,<vat-init-list>., {'in'} 

236 	 <var-init> -> <identifier>.=<var-asign>, {'in', ','}
	 <var-init> -> <identifier>.=<expression>, {'in', ','} 

237 	 <function-call> -> .ID(), {'-', '*', '/', '+', 'in', ','}
	 <aritmetic-operation> -> .<factor>, {'in', ','}
	 <atom> -> .ID, {'-', '*', '/', '+', 'in', ','}
	 <var-init> -> <identifier>=.<expression>, {'in', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ',', 'in', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '+', 'in', ','}
	 <var-asign> -> .ID:=<expression>, {'in', ','}
	 <var-init> -> <identifier>=.<var-asign>, {'in', ','}
	 <factor> -> .<atom>*<factor>, {'-', 'in', '+', ','}
	 <expression> -> .<aritmetic-operation>, {'in', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', 'in', ','}
	 <factor> -> .<atom>, {'-', 'in', '+', ','}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'in', ','}
	 <factor> -> .<atom>/<factor>, {'-', 'in', '+', ','}
	 <atom> -> .number, {'-', '*', '/', ',', 'in', '+'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'in', ','} 

238 	 <var-asign> -> ID.:=<expression>, {'in', ','}
	 <function-call> -> ID.(), {'-', '*', '/', ',', 'in', '+'}
	 <function-call> -> ID.(<param-list>), {'-', '*', '/', ',', 'in', '+'}
	 <atom> -> ID., {'-', '*', '/', ',', 'in', '+'} 

239 	 <expression> -> .<aritmetic-operation>, {'in', ','}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'in', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', 'in', ','}
	 <function-call> -> .ID(), {'-', '*', '/', '+', 'in', ','}
	 <factor> -> .<atom>, {'-', 'in', '+', ','}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'in', ','}
	 <aritmetic-operation> -> .<factor>, {'in', ','}
	 <atom> -> .ID, {'-', '*', '/', '+', 'in', ','}
	 <factor> -> .<atom>/<factor>, {'-', 'in', '+', ','}
	 <atom> -> .number, {'-', '*', '/', ',', 'in', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '+', 'in', ','}
	 <factor> -> .<atom>*<factor>, {'-', 'in', '+', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ',', 'in', '+'}
	 <var-asign> -> ID:=.<expression>, {'in', ','} 

240 	 <function-call> -> ID.(), {'-', '*', '/', ',', 'in', '+'}
	 <function-call> -> ID.(<param-list>), {'-', '*', '/', ',', 'in', '+'}
	 <atom> -> ID., {'-', '*', '/', ',', 'in', '+'} 

241 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <function-call> -> ID(.<param-list>), {'-', '*', '/', ',', 'in', '+'}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <function-call> -> ID(.), {'-', '*', '/', ',', 'in', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

242 	 <function-call> -> ID()., {'-', '*', '/', ',', 'in', '+'} 

243 	 <function-call> -> ID(<param-list>.), {'-', '*', '/', ',', 'in', '+'} 

244 	 <function-call> -> ID(<param-list>)., {'-', '*', '/', ',', 'in', '+'} 

245 	 <atom> -> number., {'-', '*', '/', ',', 'in', '+'} 

246 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '/', ',', 'in', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

247 	 <atom> -> (<aritmetic-operation>.), {'-', '*', '/', ',', 'in', '+'} 

248 	 <atom> -> (<aritmetic-operation>)., {'-', '*', '/', ',', 'in', '+'} 

249 	 <var-asign> -> ID:=<expression>., {'in', ','} 

250 	 <expression> -> <aritmetic-operation>., {'in', ','} 

251 	 <aritmetic-operation> -> <factor>., {'in', ','}
	 <aritmetic-operation> -> <factor>.+<aritmetic-operation>, {'in', ','}
	 <aritmetic-operation> -> <factor>.-<aritmetic-operation>, {'in', ','} 

252 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'in', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', 'in', ','}
	 <function-call> -> .ID(), {'-', '*', '/', '+', 'in', ','}
	 <factor> -> .<atom>, {'-', 'in', '+', ','}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'in', ','}
	 <aritmetic-operation> -> .<factor>, {'in', ','}
	 <atom> -> .ID, {'-', '*', '/', '+', 'in', ','}
	 <factor> -> .<atom>/<factor>, {'-', 'in', '+', ','}
	 <aritmetic-operation> -> <factor>+.<aritmetic-operation>, {'in', ','}
	 <atom> -> .number, {'-', '*', '/', ',', 'in', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '+', 'in', ','}
	 <factor> -> .<atom>*<factor>, {'-', 'in', '+', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ',', 'in', '+'} 

253 	 <aritmetic-operation> -> <factor>+<aritmetic-operation>., {'in', ','} 

254 	 <factor> -> <atom>., {'-', 'in', '+', ','}
	 <factor> -> <atom>.*<factor>, {'-', 'in', '+', ','}
	 <factor> -> <atom>./<factor>, {'-', 'in', '+', ','} 

255 	 <atom> -> .<function-call>, {'-', '*', '/', ',', 'in', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', ',', 'in', '+'}
	 <factor> -> .<atom>, {'-', 'in', '+', ','}
	 <atom> -> .ID, {'-', '*', '/', ',', 'in', '+'}
	 <factor> -> <atom>*.<factor>, {'-', 'in', '+', ','}
	 <factor> -> .<atom>/<factor>, {'-', 'in', '+', ','}
	 <atom> -> .number, {'-', '*', '/', '+', 'in', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ',', 'in', '+'}
	 <factor> -> .<atom>*<factor>, {'-', 'in', '+', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ',', 'in', '+'} 

256 	 <factor> -> <atom>*<factor>., {'-', 'in', '+', ','} 

257 	 <atom> -> <function-call>., {'-', '*', '/', ',', 'in', '+'} 

258 	 <atom> -> .<function-call>, {'-', '*', '/', ',', 'in', '+'}
	 <factor> -> <atom>/.<factor>, {'-', 'in', '+', ','}
	 <function-call> -> .ID(), {'-', '*', '/', ',', 'in', '+'}
	 <factor> -> .<atom>, {'-', 'in', '+', ','}
	 <atom> -> .ID, {'-', '*', '/', ',', 'in', '+'}
	 <factor> -> .<atom>/<factor>, {'-', 'in', '+', ','}
	 <atom> -> .number, {'-', '*', '/', '+', 'in', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ',', 'in', '+'}
	 <factor> -> .<atom>*<factor>, {'-', 'in', '+', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ',', 'in', '+'} 

259 	 <factor> -> <atom>/<factor>., {'-', 'in', '+', ','} 

260 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'in', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', 'in', ','}
	 <function-call> -> .ID(), {'-', '*', '/', '+', 'in', ','}
	 <factor> -> .<atom>, {'-', 'in', '+', ','}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'in', ','}
	 <aritmetic-operation> -> .<factor>, {'in', ','}
	 <atom> -> .ID, {'-', '*', '/', '+', 'in', ','}
	 <aritmetic-operation> -> <factor>-.<aritmetic-operation>, {'in', ','}
	 <factor> -> .<atom>/<factor>, {'-', 'in', '+', ','}
	 <atom> -> .number, {'-', '*', '/', ',', 'in', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', '+', 'in', ','}
	 <factor> -> .<atom>*<factor>, {'-', 'in', '+', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ',', 'in', '+'} 

261 	 <aritmetic-operation> -> <factor>-<aritmetic-operation>., {'in', ','} 

262 	 <var-init> -> <identifier>=<expression>., {'in', ','} 

263 	 <var-init> -> <identifier>=<var-asign>., {'in', ','} 

264 	 <var-dec> -> let<vat-init-list>.in<var-decl-expr>, {';'} 

265 	 <expression> -> .<aritmetic-operation>, {';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <var-decl-expr> -> .<var-dec>, {';'}
	 <conditional> -> .<full-conditional>, {';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {';'}
	 <var-decl-expr> -> .<flux-control>, {';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {';'}
	 <var-decl-expr> -> .<expression>, {';'}
	 <var-dec> -> let<vat-init-list>in.<var-decl-expr>, {';'}
	 <aritmetic-operation> -> .<factor>, {';'}
	 <for-loop> -> .for(ID<iterable-expression>)<scope>, {';'}
	 <conditional> -> .<inline-conditional>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}, {';'}
	 <var-decl-expr> -> .(<var-dec>), {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression>, {';'}
	 <flux-control> -> .<conditional>, {';'}
	 <var-decl-expr> -> .<scope>, {';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <while-loop> -> .while(<conditional-expresssion>)<scope>, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression><else-statement>, {';'}
	 <flux-control> -> .<while-loop>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}<else-statement>, {';'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <var-dec> -> .let<vat-init-list>in<var-decl-expr>, {';'}
	 <scope> -> .{<inst-list>}, {';'}
	 <flux-control> -> .<for-loop>, {';'}
	 <scope> -> .{}, {';'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'} 

266 	 <function-call> -> ID.(), {'-', '*', '/', ';', '+'}
	 <function-call> -> ID.(<param-list>), {'-', '*', '/', ';', '+'}
	 <atom> -> ID., {'-', '*', '/', ';', '+'} 

267 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <function-call> -> ID(.<param-list>), {'-', '*', '/', ';', '+'}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <function-call> -> ID(.), {'-', '*', '/', ';', '+'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

268 	 <function-call> -> ID()., {'-', '*', '/', ';', '+'} 

269 	 <function-call> -> ID(<param-list>.), {'-', '*', '/', ';', '+'} 

270 	 <function-call> -> ID(<param-list>)., {'-', '*', '/', ';', '+'} 

271 	 <atom> -> number., {'-', '*', '/', ';', '+'} 

272 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <var-decl-expr> -> (.<var-dec>), {';'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'}
	 <var-dec> -> .let<vat-init-list>in<var-decl-expr>, {')'} 

273 	 <vat-init-list> -> .<var-init>, {'in'}
	 <var-init> -> .<identifier>=<var-asign>, {'in', ','}
	 <var-dec> -> let.<vat-init-list>in<var-decl-expr>, {')'}
	 <vat-init-list> -> .<var-init>,<vat-init-list>, {'in'}
	 <var-init> -> .<identifier>=<expression>, {'in', ','}
	 <identifier> -> .ID, {'='}
	 <identifier> -> .ID<type-anotation>, {'='} 

274 	 <var-dec> -> let<vat-init-list>.in<var-decl-expr>, {')'} 

275 	 <scope> -> .{<inst-list>}, {')'}
	 <flux-control> -> .<for-loop>, {')'}
	 <scope> -> .{}, {')'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <expression> -> .<aritmetic-operation>, {')'}
	 <factor> -> .<atom>, {')', '+', '-'}
	 <var-decl-expr> -> .<var-dec>, {')'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <var-decl-expr> -> .<flux-control>, {')'}
	 <conditional> -> .<full-conditional>, {')'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <var-decl-expr> -> .<expression>, {')'}
	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <var-dec> -> let<vat-init-list>in.<var-decl-expr>, {')'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <for-loop> -> .for(ID<iterable-expression>)<scope>, {')'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <var-decl-expr> -> .(<var-dec>), {')'}
	 <conditional> -> .<inline-conditional>, {')'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression>, {')'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}, {')'}
	 <flux-control> -> .<conditional>, {')'}
	 <var-decl-expr> -> .<scope>, {')'}
	 <while-loop> -> .while(<conditional-expresssion>)<scope>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression><else-statement>, {')'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}<else-statement>, {')'}
	 <flux-control> -> .<while-loop>, {')'}
	 <var-dec> -> .let<vat-init-list>in<var-decl-expr>, {')'} 

276 	 <while-loop> -> while.(<conditional-expresssion>)<scope>, {')'} 

277 	 <while-loop> -> while(.<conditional-expresssion>)<scope>, {')'}
	 <conditional-expresssion> -> .<condition>&<conditional-expresssion>, {')'}
	 <comparation> -> .<expression><<expression>, {'&', ')', '|'}
	 <comparation> -> .<expression>><expression>, {')', '|', '&'}
	 <condition> -> .<boolean-value>, {')', '|', '&'}
	 <comparation> -> .<expression>>=<expression>, {'&', ')', '|'}
	 <condition> -> .<comparation>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <conditional-expresssion> -> .<condition>, {')'}
	 <comparation> -> .<expression>==<expression>, {')', '|', '&'}
	 <boolean-value> -> .false, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .number, {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <conditional-expresssion> -> .!<condition>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <comparation> -> .<expression>!=<expression>, {')', '|', '&'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <comparation> -> .<expression>=<<expression>, {')', '|', '&'}
	 <function-call> -> .ID(), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <condition> -> .(<conditional-expresssion>), {'&', ')', '|'}
	 <conditional-expresssion> -> .<condition>|<conditional-expresssion>, {')'}
	 <boolean-value> -> .true, {'&', ')', '|'} 

278 	 <while-loop> -> while(<conditional-expresssion>.)<scope>, {')'} 

279 	 <scope> -> .{<inst-list>}, {')'}
	 <scope> -> .{}, {')'}
	 <while-loop> -> while(<conditional-expresssion>).<scope>, {')'} 

280 	 <expression> -> .<aritmetic-operation>, {';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <conditional> -> .<full-conditional>, {';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {';'}
	 <inst> -> .<var-asign>, {';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {';'}
	 <scope> -> .{}, {';'}
	 <scope> -> {.<inst-list>}, {')'}
	 <aritmetic-operation> -> .<factor>, {';'}
	 <for-loop> -> .for(ID<iterable-expression>)<scope>, {';'}
	 <conditional> -> .<inline-conditional>, {';'}
	 <inst> -> .<var-dec>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression>, {';'}
	 <flux-control> -> .<conditional>, {';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <inst> -> .<scope>, {';'}
	 <scope> -> {.}, {')'}
	 <inst-list> -> .<inst-wrapper>, {'}'}
	 <while-loop> -> .while(<conditional-expresssion>)<scope>, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression><else-statement>, {';'}
	 <flux-control> -> .<while-loop>, {';'}
	 <inst> -> .<flux-control>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}<else-statement>, {';'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <inst> -> .<expression>, {';'}
	 <var-dec> -> .let<vat-init-list>in<var-decl-expr>, {';'}
	 <scope> -> .{<inst-list>}, {';'}
	 <flux-control> -> .<for-loop>, {';'}
	 <var-asign> -> .ID:=<expression>, {';'}
	 <inst-wrapper> -> .<inst>;, {'}'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'} 

281 	 <scope> -> {}., {')'} 

282 	 <function-call> -> ID.(), {'-', '*', '/', ';', '+'}
	 <var-asign> -> ID.:=<expression>, {';'}
	 <function-call> -> ID.(<param-list>), {'-', '*', '/', ';', '+'}
	 <atom> -> ID., {'-', '*', '/', ';', '+'} 

283 	 <var-asign> -> ID:=.<expression>, {';'}
	 <expression> -> .<aritmetic-operation>, {';'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {';'}
	 <aritmetic-operation> -> .<factor>, {';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'} 

284 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

285 	 <atom> -> (<aritmetic-operation>.), {'-', '*', '/', ';', '+'} 

286 	 <atom> -> (<aritmetic-operation>)., {'-', '*', '/', ';', '+'} 

287 	 <var-asign> -> ID:=<expression>., {';'} 

288 	 <expression> -> <aritmetic-operation>., {';'} 

289 	 <aritmetic-operation> -> <factor>., {';'}
	 <aritmetic-operation> -> <factor>.+<aritmetic-operation>, {';'}
	 <aritmetic-operation> -> <factor>.-<aritmetic-operation>, {';'} 

290 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {';'}
	 <aritmetic-operation> -> .<factor>, {';'}
	 <aritmetic-operation> -> <factor>+.<aritmetic-operation>, {';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'} 

291 	 <aritmetic-operation> -> <factor>+<aritmetic-operation>., {';'} 

292 	 <factor> -> <atom>.*<factor>, {'-', '+', ';'}
	 <factor> -> <atom>./<factor>, {'-', '+', ';'}
	 <factor> -> <atom>., {'-', '+', ';'} 

293 	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <factor> -> <atom>*.<factor>, {'-', '+', ';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'} 

294 	 <factor> -> <atom>*<factor>., {'-', '+', ';'} 

295 	 <atom> -> <function-call>., {'-', '*', '/', ';', '+'} 

296 	 <factor> -> <atom>/.<factor>, {'-', '+', ';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'} 

297 	 <factor> -> <atom>/<factor>., {'-', '+', ';'} 

298 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <aritmetic-operation> -> <factor>-.<aritmetic-operation>, {';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {';'}
	 <aritmetic-operation> -> .<factor>, {';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'} 

299 	 <aritmetic-operation> -> <factor>-<aritmetic-operation>., {';'} 

300 	 <inline-conditional> -> if.(<conditional-expresssion>)<expression>, {';'}
	 <inline-conditional> -> if.(<conditional-expresssion>)<expression><else-statement>, {';'}
	 <full-conditional> -> if.(<conditional-expresssion>){<inst-list>}, {';'}
	 <full-conditional> -> if.(<conditional-expresssion>){<inst-list>}<else-statement>, {';'} 

301 	 <conditional-expresssion> -> .<condition>&<conditional-expresssion>, {')'}
	 <condition> -> .<boolean-value>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <conditional-expresssion> -> .<condition>, {')'}
	 <boolean-value> -> .false, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <conditional-expresssion> -> .!<condition>, {')'}
	 <comparation> -> .<expression>!=<expression>, {')', '|', '&'}
	 <comparation> -> .<expression>=<<expression>, {')', '|', '&'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <conditional-expresssion> -> .<condition>|<conditional-expresssion>, {')'}
	 <comparation> -> .<expression><<expression>, {'&', ')', '|'}
	 <comparation> -> .<expression>><expression>, {')', '|', '&'}
	 <comparation> -> .<expression>>=<expression>, {'&', ')', '|'}
	 <full-conditional> -> if(.<conditional-expresssion>){<inst-list>}, {';'}
	 <inline-conditional> -> if(.<conditional-expresssion>)<expression>, {';'}
	 <inline-conditional> -> if(.<conditional-expresssion>)<expression><else-statement>, {';'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <condition> -> .<comparation>, {')', '|', '&'}
	 <comparation> -> .<expression>==<expression>, {')', '|', '&'}
	 <atom> -> .number, {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <condition> -> .(<conditional-expresssion>), {'&', ')', '|'}
	 <full-conditional> -> if(.<conditional-expresssion>){<inst-list>}<else-statement>, {';'}
	 <aritmetic-operation> -> .<factor>, {'>', '<', '>=', '=<', '==', '!='}
	 <boolean-value> -> .true, {'&', ')', '|'} 

302 	 <full-conditional> -> if(<conditional-expresssion>.){<inst-list>}, {';'}
	 <inline-conditional> -> if(<conditional-expresssion>.)<expression><else-statement>, {';'}
	 <full-conditional> -> if(<conditional-expresssion>.){<inst-list>}<else-statement>, {';'}
	 <inline-conditional> -> if(<conditional-expresssion>.)<expression>, {';'} 

303 	 <atom> -> .ID, {'-', '*', 'else', '/', ';', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'else', ';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', '+', ';'}
	 <full-conditional> -> if(<conditional-expresssion>).{<inst-list>}, {';'}
	 <full-conditional> -> if(<conditional-expresssion>).{<inst-list>}<else-statement>, {';'}
	 <factor> -> .<atom>*<factor>, {'+', '-', 'else', ';'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'else', ';'}
	 <factor> -> .<atom>, {'-', 'else', '+', ';'}
	 <factor> -> .<atom>/<factor>, {'-', 'else', '+', ';'}
	 <expression> -> .<aritmetic-operation>, {'else', ';'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', '+', ';'}
	 <inline-conditional> -> if(<conditional-expresssion>).<expression>, {';'}
	 <inline-conditional> -> if(<conditional-expresssion>).<expression><else-statement>, {';'}
	 <aritmetic-operation> -> .<factor>, {'else', ';'}
	 <atom> -> .number, {'-', '*', '/', 'else', '+', ';'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', 'else', '+', ';'}
	 <function-call> -> .ID(), {'-', '*', 'else', '/', ';', '+'} 

304 	 <expression> -> .<aritmetic-operation>, {';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <conditional> -> .<full-conditional>, {';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {';'}
	 <inst> -> .<var-asign>, {';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'}
	 <full-conditional> -> if(<conditional-expresssion>){.<inst-list>}, {';'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {';'}
	 <scope> -> .{}, {';'}
	 <aritmetic-operation> -> .<factor>, {';'}
	 <for-loop> -> .for(ID<iterable-expression>)<scope>, {';'}
	 <conditional> -> .<inline-conditional>, {';'}
	 <full-conditional> -> if(<conditional-expresssion>){.<inst-list>}<else-statement>, {';'}
	 <inst> -> .<var-dec>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression>, {';'}
	 <flux-control> -> .<conditional>, {';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <inst> -> .<scope>, {';'}
	 <inst-list> -> .<inst-wrapper>, {'}'}
	 <while-loop> -> .while(<conditional-expresssion>)<scope>, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression><else-statement>, {';'}
	 <flux-control> -> .<while-loop>, {';'}
	 <inst> -> .<flux-control>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}<else-statement>, {';'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <inst> -> .<expression>, {';'}
	 <var-dec> -> .let<vat-init-list>in<var-decl-expr>, {';'}
	 <scope> -> .{<inst-list>}, {';'}
	 <flux-control> -> .<for-loop>, {';'}
	 <var-asign> -> .ID:=<expression>, {';'}
	 <inst-wrapper> -> .<inst>;, {'}'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'} 

305 	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>.}, {';'}
	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>.}<else-statement>, {';'} 

306 	 <else-statement> -> .else<inline-else>, {';'}
	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>}., {';'}
	 <else-statement> -> .else<full-else>, {';'}
	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>}.<else-statement>, {';'} 

307 	 <else-statement> -> else.<full-else>, {';'}
	 <else-statement> -> else.<inline-else>, {';'} 

308 	 <else-statement> -> else<inline-else>., {';'} 

309 	 <else-statement> -> else<full-else>., {';'} 

310 	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>}<else-statement>., {';'} 

311 	 <inst-list> -> <inst-wrapper>., {'}'} 

312 	 <inst-wrapper> -> <inst>.;, {'}'} 

313 	 <inst-wrapper> -> <inst>;., {'}'} 

314 	 <inst> -> <var-dec>., {';'} 

315 	 <inst> -> <expression>., {';'} 

316 	 <inst> -> <flux-control>., {';'} 

317 	 <inst> -> <scope>., {';'} 

318 	 <inst> -> <var-asign>., {';'} 

319 	 <flux-control> -> <conditional>., {';'} 

320 	 <conditional> -> <inline-conditional>., {';'} 

321 	 <conditional> -> <full-conditional>., {';'} 

322 	 <flux-control> -> <while-loop>., {';'} 

323 	 <flux-control> -> <for-loop>., {';'} 

324 	 <function-call> -> ID.(<param-list>), {'-', '*', 'else', '/', ';', '+'}
	 <function-call> -> ID.(), {'-', '*', '/', 'else', ';', '+'}
	 <atom> -> ID., {'-', '*', '/', 'else', ';', '+'} 

325 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <function-call> -> ID(.<param-list>), {'-', '*', '/', 'else', ';', '+'}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <function-call> -> ID(.), {'-', '*', 'else', '/', ';', '+'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

326 	 <function-call> -> ID()., {'-', '*', '/', 'else', ';', '+'} 

327 	 <function-call> -> ID(<param-list>.), {'-', '*', 'else', '/', ';', '+'} 

328 	 <function-call> -> ID(<param-list>)., {'-', '*', '/', 'else', ';', '+'} 

329 	 <atom> -> number., {'-', '*', 'else', '/', ';', '+'} 

330 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', 'else', '/', ';', '+'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

331 	 <atom> -> (<aritmetic-operation>.), {'-', '*', '/', 'else', ';', '+'} 

332 	 <atom> -> (<aritmetic-operation>)., {'-', '*', 'else', '/', ';', '+'} 

333 	 <inline-conditional> -> if(<conditional-expresssion>)<expression>., {';'}
	 <else-statement> -> .else<inline-else>, {';'}
	 <inline-conditional> -> if(<conditional-expresssion>)<expression>.<else-statement>, {';'}
	 <else-statement> -> .else<full-else>, {';'} 

334 	 <inline-conditional> -> if(<conditional-expresssion>)<expression><else-statement>., {';'} 

335 	 <expression> -> <aritmetic-operation>., {'else', ';'} 

336 	 <aritmetic-operation> -> <factor>.-<aritmetic-operation>, {'else', ';'}
	 <aritmetic-operation> -> <factor>.+<aritmetic-operation>, {'else', ';'}
	 <aritmetic-operation> -> <factor>., {'else', ';'} 

337 	 <factor> -> .<atom>/<factor>, {'-', 'else', '+', ';'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', '+', ';'}
	 <atom> -> .ID, {'-', '*', '/', 'else', '+', ';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'else', ';'}
	 <aritmetic-operation> -> .<factor>, {'else', ';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', ';', '+'}
	 <aritmetic-operation> -> <factor>+.<aritmetic-operation>, {'else', ';'}
	 <atom> -> .number, {'-', '*', 'else', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', 'else', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'+', '-', 'else', ';'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'else', ';'}
	 <factor> -> .<atom>, {'-', 'else', '+', ';'}
	 <function-call> -> .ID(), {'-', '*', '/', 'else', ';', '+'} 

338 	 <aritmetic-operation> -> <factor>+<aritmetic-operation>., {'else', ';'} 

339 	 <factor> -> <atom>., {'-', 'else', '+', ';'}
	 <factor> -> <atom>./<factor>, {'-', 'else', '+', ';'}
	 <factor> -> <atom>.*<factor>, {'+', '-', 'else', ';'} 

340 	 <factor> -> .<atom>/<factor>, {'+', '-', 'else', ';'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', ';', '+'}
	 <atom> -> .ID, {'-', '*', '/', 'else', ';', '+'}
	 <factor> -> <atom>*.<factor>, {'+', '-', 'else', ';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', ';', '+'}
	 <atom> -> .number, {'-', '*', 'else', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', 'else', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'+', '-', 'else', ';'}
	 <factor> -> .<atom>, {'+', '-', 'else', ';'}
	 <function-call> -> .ID(), {'-', '*', '/', 'else', ';', '+'} 

341 	 <factor> -> <atom>*<factor>., {'+', '-', 'else', ';'} 

342 	 <atom> -> <function-call>., {'-', '*', 'else', '/', ';', '+'} 

343 	 <factor> -> .<atom>/<factor>, {'-', 'else', '+', ';'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', '+', ';'}
	 <atom> -> .ID, {'-', '*', '/', 'else', '+', ';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', '+', ';'}
	 <atom> -> .number, {'-', '*', 'else', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', 'else', '+', ';'}
	 <factor> -> .<atom>*<factor>, {'-', 'else', '+', ';'}
	 <factor> -> <atom>/.<factor>, {'-', 'else', '+', ';'}
	 <factor> -> .<atom>, {'-', 'else', '+', ';'}
	 <function-call> -> .ID(), {'-', '*', '/', 'else', '+', ';'} 

344 	 <factor> -> <atom>/<factor>., {'-', 'else', '+', ';'} 

345 	 <factor> -> .<atom>/<factor>, {'-', 'else', '+', ';'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', '+', ';'}
	 <atom> -> .ID, {'-', '*', '/', 'else', '+', ';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'else', ';'}
	 <aritmetic-operation> -> .<factor>, {'else', ';'}
	 <aritmetic-operation> -> <factor>-.<aritmetic-operation>, {'else', ';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', ';', '+'}
	 <atom> -> .number, {'-', '*', 'else', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', 'else', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'+', '-', 'else', ';'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'else', ';'}
	 <factor> -> .<atom>, {'-', 'else', '+', ';'}
	 <function-call> -> .ID(), {'-', '*', '/', 'else', ';', '+'} 

346 	 <aritmetic-operation> -> <factor>-<aritmetic-operation>., {'else', ';'} 

347 	 <scope> -> {<inst-list>.}, {')'} 

348 	 <scope> -> {<inst-list>}., {')'} 

349 	 <while-loop> -> while(<conditional-expresssion>)<scope>., {')'} 

350 	 <for-loop> -> for.(ID<iterable-expression>)<scope>, {')'} 

351 	 <for-loop> -> for(.ID<iterable-expression>)<scope>, {')'} 

352 	 <for-loop> -> for(ID.<iterable-expression>)<scope>, {')'} 

353 	 <for-loop> -> for(ID<iterable-expression>.)<scope>, {')'} 

354 	 <scope> -> .{<inst-list>}, {')'}
	 <for-loop> -> for(ID<iterable-expression>).<scope>, {')'}
	 <scope> -> .{}, {')'} 

355 	 <for-loop> -> for(ID<iterable-expression>)<scope>., {')'} 

356 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <var-decl-expr> -> (.<var-dec>), {')'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'}
	 <var-dec> -> .let<vat-init-list>in<var-decl-expr>, {')'} 

357 	 <var-decl-expr> -> (<var-dec>.), {')'} 

358 	 <var-decl-expr> -> (<var-dec>)., {')'} 

359 	 <inline-conditional> -> if.(<conditional-expresssion>)<expression>, {')'}
	 <inline-conditional> -> if.(<conditional-expresssion>)<expression><else-statement>, {')'}
	 <full-conditional> -> if.(<conditional-expresssion>){<inst-list>}, {')'}
	 <full-conditional> -> if.(<conditional-expresssion>){<inst-list>}<else-statement>, {')'} 

360 	 <conditional-expresssion> -> .<condition>&<conditional-expresssion>, {')'}
	 <condition> -> .<boolean-value>, {')', '|', '&'}
	 <atom> -> .<function-call>, {'-', '>', '*', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <full-conditional> -> if(.<conditional-expresssion>){<inst-list>}<else-statement>, {')'}
	 <conditional-expresssion> -> .<condition>, {')'}
	 <boolean-value> -> .false, {')', '|', '&'}
	 <factor> -> .<atom>*<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <conditional-expresssion> -> .!<condition>, {')'}
	 <comparation> -> .<expression>!=<expression>, {')', '|', '&'}
	 <comparation> -> .<expression>=<<expression>, {')', '|', '&'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <conditional-expresssion> -> .<condition>|<conditional-expresssion>, {')'}
	 <comparation> -> .<expression><<expression>, {'&', ')', '|'}
	 <comparation> -> .<expression>><expression>, {')', '|', '&'}
	 <comparation> -> .<expression>>=<expression>, {'&', ')', '|'}
	 <condition> -> .<comparation>, {')', '|', '&'}
	 <expression> -> .<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <comparation> -> .<expression>==<expression>, {')', '|', '&'}
	 <atom> -> .number, {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <atom> -> .(<aritmetic-operation>), {'-', '>', '*', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <inline-conditional> -> if(.<conditional-expresssion>)<expression>, {')'}
	 <inline-conditional> -> if(.<conditional-expresssion>)<expression><else-statement>, {')'}
	 <full-conditional> -> if(.<conditional-expresssion>){<inst-list>}, {')'}
	 <factor> -> .<atom>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <function-call> -> .ID(), {'-', '*', '>', '<', '/', '>=', '=<', '==', '!=', '+'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {'>', '<', '>=', '=<', '==', '!='}
	 <factor> -> .<atom>/<factor>, {'-', '>', '<', '>=', '=<', '==', '!=', '+'}
	 <atom> -> .ID, {'-', '*', '>', '<', '>=', '/', '=<', '==', '!=', '+'}
	 <condition> -> .(<conditional-expresssion>), {'&', ')', '|'}
	 <aritmetic-operation> -> .<factor>, {'>', '<', '>=', '=<', '==', '!='}
	 <boolean-value> -> .true, {'&', ')', '|'} 

361 	 <inline-conditional> -> if(<conditional-expresssion>.)<expression>, {')'}
	 <inline-conditional> -> if(<conditional-expresssion>.)<expression><else-statement>, {')'}
	 <full-conditional> -> if(<conditional-expresssion>.){<inst-list>}<else-statement>, {')'}
	 <full-conditional> -> if(<conditional-expresssion>.){<inst-list>}, {')'} 

362 	 <expression> -> .<aritmetic-operation>, {')', 'else'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', 'else'}
	 <atom> -> .number, {'-', '*', '/', 'else', ')', '+'}
	 <full-conditional> -> if(<conditional-expresssion>).{<inst-list>}, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>*<factor>, {'+', ')', 'else', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', 'else'}
	 <full-conditional> -> if(<conditional-expresssion>).{<inst-list>}<else-statement>, {')'}
	 <function-call> -> .ID(), {'-', '*', 'else', '/', ')', '+'}
	 <factor> -> .<atom>, {')', 'else', '+', '-'}
	 <atom> -> .ID, {'-', '*', 'else', '/', ')', '+'}
	 <inline-conditional> -> if(<conditional-expresssion>).<expression>, {')'}
	 <aritmetic-operation> -> .<factor>, {')', 'else'}
	 <inline-conditional> -> if(<conditional-expresssion>).<expression><else-statement>, {')'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>/<factor>, {')', 'else', '+', '-'} 

363 	 <expression> -> .<aritmetic-operation>, {';'}
	 <atom> -> .ID, {'-', '*', '/', ';', '+'}
	 <conditional> -> .<full-conditional>, {';'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {';'}
	 <inst> -> .<var-asign>, {';'}
	 <atom> -> .<function-call>, {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>*<factor>, {'-', '+', ';'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {';'}
	 <scope> -> .{}, {';'}
	 <aritmetic-operation> -> .<factor>, {';'}
	 <full-conditional> -> if(<conditional-expresssion>){.<inst-list>}, {')'}
	 <for-loop> -> .for(ID<iterable-expression>)<scope>, {';'}
	 <conditional> -> .<inline-conditional>, {';'}
	 <inst> -> .<var-dec>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression>, {';'}
	 <flux-control> -> .<conditional>, {';'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ';', '+'}
	 <inst> -> .<scope>, {';'}
	 <full-conditional> -> if(<conditional-expresssion>){.<inst-list>}<else-statement>, {')'}
	 <inst-list> -> .<inst-wrapper>, {'}'}
	 <while-loop> -> .while(<conditional-expresssion>)<scope>, {';'}
	 <inline-conditional> -> .if(<conditional-expresssion>)<expression><else-statement>, {';'}
	 <flux-control> -> .<while-loop>, {';'}
	 <inst> -> .<flux-control>, {';'}
	 <full-conditional> -> .if(<conditional-expresssion>){<inst-list>}<else-statement>, {';'}
	 <factor> -> .<atom>, {'-', '+', ';'}
	 <atom> -> .number, {'-', '*', '/', ';', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ';', '+'}
	 <factor> -> .<atom>/<factor>, {'-', '+', ';'}
	 <inst> -> .<expression>, {';'}
	 <var-dec> -> .let<vat-init-list>in<var-decl-expr>, {';'}
	 <scope> -> .{<inst-list>}, {';'}
	 <flux-control> -> .<for-loop>, {';'}
	 <var-asign> -> .ID:=<expression>, {';'}
	 <inst-wrapper> -> .<inst>;, {'}'}
	 <function-call> -> .ID(), {'-', '*', '/', ';', '+'} 

364 	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>.}, {')'}
	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>.}<else-statement>, {')'} 

365 	 <else-statement> -> .else<inline-else>, {')'}
	 <else-statement> -> .else<full-else>, {')'}
	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>}., {')'}
	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>}.<else-statement>, {')'} 

366 	 <else-statement> -> else.<inline-else>, {')'}
	 <else-statement> -> else.<full-else>, {')'} 

367 	 <else-statement> -> else<inline-else>., {')'} 

368 	 <else-statement> -> else<full-else>., {')'} 

369 	 <full-conditional> -> if(<conditional-expresssion>){<inst-list>}<else-statement>., {')'} 

370 	 <function-call> -> ID.(<param-list>), {'-', '*', 'else', '/', ')', '+'}
	 <function-call> -> ID.(), {'-', '*', '/', 'else', ')', '+'}
	 <atom> -> ID., {'-', '*', '/', 'else', ')', '+'} 

371 	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', ','}
	 <var-method> -> .ID.ID(<param-list>), {')', ',', '@'}
	 <string-atom> -> .<var-attr>, {'@', ')', ','}
	 <factor> -> .<atom>/<factor>, {')', '+', '-', ','}
	 <string-atom> -> .<function-call>, {')', '@', ','}
	 <function-call> -> .ID(<param-list>), {'-', '*', '@', '/', ',', ')', '+'}
	 <string-atom> -> .<var-method>, {'@', ')', ','}
	 <string-operation> -> .<string-atom>@<string-operation>, {')', ','}
	 <string-operation> -> .<string-atom>, {')', ','}
	 <aritmetic-operation> -> .<factor>, {')', ','}
	 <var-attr> -> .ID.ID, {'@', ')', ','}
	 <atom> -> .<function-call>, {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .(<string-operation>), {'@', ')', ','}
	 <param> -> .<expression>, {')', ','}
	 <function-call> -> ID(.), {'-', '*', 'else', '/', ')', '+'}
	 <expression> -> .<aritmetic-operation>, {')', ','}
	 <atom> -> .number, {'-', '*', '/', '+', ')', ','}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', '+', ')', ','}
	 <string-atom> -> .string, {')', ',', '@'}
	 <param> -> .<string-operation>, {')', ','}
	 <factor> -> .<atom>*<factor>, {')', '+', '-', ','}
	 <var-method> -> .ID.ID(), {')', ',', '@'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', ','}
	 <param-list> -> .<param>,<param-list>, {')'}
	 <string-atom> -> .ID, {'@', ')', ','}
	 <function-call> -> .ID(), {'-', '*', '@', '/', ',', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ',', ')', '+'}
	 <param-list> -> .<param>, {')'}
	 <function-call> -> ID(.<param-list>), {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-', ','} 

372 	 <function-call> -> ID()., {'-', '*', '/', 'else', ')', '+'} 

373 	 <function-call> -> ID(<param-list>.), {'-', '*', 'else', '/', ')', '+'} 

374 	 <function-call> -> ID(<param-list>)., {'-', '*', '/', 'else', ')', '+'} 

375 	 <atom> -> number., {'-', '*', 'else', '/', ')', '+'} 

376 	 <function-call> -> .ID(), {'-', '*', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')'}
	 <factor> -> .<atom>/<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>, {')'}
	 <atom> -> .<function-call>, {'-', '*', '/', ')', '+'}
	 <atom> -> .ID, {'-', '*', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', '/', ')', '+'}
	 <atom> -> (.<aritmetic-operation>), {'-', '*', 'else', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>*<factor>, {')', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', '/', ')', '+'}
	 <factor> -> .<atom>, {')', '+', '-'} 

377 	 <atom> -> (<aritmetic-operation>.), {'-', '*', '/', 'else', ')', '+'} 

378 	 <atom> -> (<aritmetic-operation>)., {'-', '*', 'else', '/', ')', '+'} 

379 	 <else-statement> -> .else<inline-else>, {')'}
	 <else-statement> -> .else<full-else>, {')'}
	 <inline-conditional> -> if(<conditional-expresssion>)<expression>., {')'}
	 <inline-conditional> -> if(<conditional-expresssion>)<expression>.<else-statement>, {')'} 

380 	 <inline-conditional> -> if(<conditional-expresssion>)<expression><else-statement>., {')'} 

381 	 <expression> -> <aritmetic-operation>., {')', 'else'} 

382 	 <aritmetic-operation> -> <factor>., {')', 'else'}
	 <aritmetic-operation> -> <factor>.+<aritmetic-operation>, {')', 'else'}
	 <aritmetic-operation> -> <factor>.-<aritmetic-operation>, {')', 'else'} 

383 	 <aritmetic-operation> -> <factor>+.<aritmetic-operation>, {')', 'else'}
	 <factor> -> .<atom>*<factor>, {')', 'else', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', 'else'}
	 <function-call> -> .ID(), {'-', '*', '/', 'else', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>, {'-', 'else', ')', '+'}
	 <atom> -> .ID, {'-', '*', 'else', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', 'else'}
	 <aritmetic-operation> -> .<factor>, {')', 'else'}
	 <atom> -> .number, {'-', '*', '/', 'else', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', 'else', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', 'else', '/', ')', '+'} 

384 	 <aritmetic-operation> -> <factor>+<aritmetic-operation>., {')', 'else'} 

385 	 <factor> -> <atom>., {')', 'else', '+', '-'}
	 <factor> -> <atom>./<factor>, {')', 'else', '+', '-'}
	 <factor> -> <atom>.*<factor>, {'+', ')', 'else', '-'} 

386 	 <factor> -> .<atom>*<factor>, {'+', ')', 'else', '-'}
	 <factor> -> <atom>*.<factor>, {'+', ')', 'else', '-'}
	 <function-call> -> .ID(), {'-', '*', 'else', '/', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>, {'+', ')', 'else', '-'}
	 <atom> -> .ID, {'-', '*', 'else', '/', ')', '+'}
	 <atom> -> .number, {'-', '*', 'else', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'+', ')', 'else', '-'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', 'else', '/', ')', '+'} 

387 	 <factor> -> <atom>*<factor>., {'+', ')', 'else', '-'} 

388 	 <atom> -> <function-call>., {'-', '*', 'else', '/', ')', '+'} 

389 	 <factor> -> .<atom>*<factor>, {')', 'else', '+', '-'}
	 <function-call> -> .ID(), {'-', '*', 'else', '/', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>, {')', 'else', '+', '-'}
	 <atom> -> .ID, {'-', '*', 'else', '/', ')', '+'}
	 <factor> -> <atom>/.<factor>, {')', 'else', '+', '-'}
	 <atom> -> .number, {'-', '*', 'else', '/', ')', '+'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>/<factor>, {')', 'else', '+', '-'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', 'else', '/', ')', '+'} 

390 	 <factor> -> <atom>/<factor>., {')', 'else', '+', '-'} 

391 	 <factor> -> .<atom>*<factor>, {')', 'else', '+', '-'}
	 <aritmetic-operation> -> .<factor>+<aritmetic-operation>, {')', 'else'}
	 <function-call> -> .ID(), {'-', '*', '/', 'else', ')', '+'}
	 <atom> -> .<function-call>, {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>, {'-', 'else', ')', '+'}
	 <atom> -> .ID, {'-', '*', 'else', '/', ')', '+'}
	 <aritmetic-operation> -> .<factor>-<aritmetic-operation>, {')', 'else'}
	 <aritmetic-operation> -> .<factor>, {')', 'else'}
	 <atom> -> .number, {'-', '*', '/', 'else', ')', '+'}
	 <aritmetic-operation> -> <factor>-.<aritmetic-operation>, {')', 'else'}
	 <function-call> -> .ID(<param-list>), {'-', '*', '/', 'else', ')', '+'}
	 <factor> -> .<atom>/<factor>, {'-', 'else', ')', '+'}
	 <atom> -> .(<aritmetic-operation>), {'-', '*', 'else', '/', ')', '+'} 

392 	 <aritmetic-operation> -> <factor>-<aritmetic-operation>., {')', 'else'} 

393 	 <var-decl-expr> -> <var-dec>., {')'} 

394 	 <var-decl-expr> -> <expression>., {')'} 

395 	 <var-decl-expr> -> <flux-control>., {')'} 

396 	 <var-decl-expr> -> <scope>., {')'} 

397 	 <var-dec> -> let<vat-init-list>in<var-decl-expr>., {')'} 

398 	 <flux-control> -> <conditional>., {')'} 

399 	 <conditional> -> <inline-conditional>., {')'} 

400 	 <conditional> -> <full-conditional>., {')'} 

401 	 <flux-control> -> <while-loop>., {')'} 

402 	 <flux-control> -> <for-loop>., {')'} 

403 	 <var-decl-expr> -> (<var-dec>.), {';'} 

404 	 <var-decl-expr> -> (<var-dec>)., {';'} 

405 	 <var-decl-expr> -> <var-dec>., {';'} 

406 	 <var-decl-expr> -> <expression>., {';'} 

407 	 <var-decl-expr> -> <flux-control>., {';'} 

408 	 <var-decl-expr> -> <scope>., {';'} 

409 	 <var-dec> -> let<vat-init-list>in<var-decl-expr>., {';'} 

410 	 <scope> -> {<inst-list>.}, {';'} 

411 	 <scope> -> {<inst-list>}., {';'} 

412 	 <while-loop> -> while(<conditional-expresssion>)<scope>., {';'} 

413 	 S' -> <program>., {'$'} 

414 	 <program> -> <inst-list>., {'$'} 

415 	 <inst-list> -> <inst-wrapper>., {'$'} 

416 	 <inst-wrapper> -> <inst>.;, {'$'} 

417 	 <inst-wrapper> -> <inst>;., {'$'} 

(0, '<aritmetic-operation>') 288
(0, 'ID') ('SHIFT', 282)
(0, '<full-conditional>') 321
(0, '<factor>') 289
(0, '<var-asign>') 318
(0, '<program>') 413
(0, '<function-call>') 295
(0, '<atom>') 292
(0, '<inst>') 416
(0, '<factor>') 289
(0, '{') ('SHIFT', 220)
(0, '<inst-list>') 414
(0, '<factor>') 289
(0, 'for') ('SHIFT', 221)
(0, '<inline-conditional>') 320
(0, '<var-dec>') 314
(0, 'if') ('SHIFT', 300)
(0, 'if') ('SHIFT', 300)
(0, '<conditional>') 319
(0, 'ID') ('SHIFT', 282)
(0, '<scope>') 317
(0, 'while') ('SHIFT', 1)
(0, 'if') ('SHIFT', 300)
(0, '<while-loop>') 322
(0, '<flux-control>') 316
(0, 'if') ('SHIFT', 300)
(0, '<atom>') 292
(0, 'number') ('SHIFT', 271)
(0, '(') ('SHIFT', 284)
(0, '<atom>') 292
(0, '<expression>') 315
(0, 'let') ('SHIFT', 228)
(0, '{') ('SHIFT', 220)
(0, '<inst-wrapper>') 415
(0, '<for-loop>') 323
(0, 'ID') ('SHIFT', 282)
(0, 'ID') ('SHIFT', 282)
(1, '(') ('SHIFT', 2)
(2, '<condition>') 175
(2, '<expression>') 123
(2, '<expression>') 123
(2, '<boolean-value>') 192
(2, '<expression>') 123
(2, '<comparation>') 193
(2, '<function-call>') 186
(2, '<aritmetic-operation>') 177
(2, '<condition>') 175
(2, '<expression>') 123
(2, 'false') ('SHIFT', 122)
(2, '<atom>') 183
(2, 'number') ('SHIFT', 110)
(2, '<factor>') 178
(2, '!') ('SHIFT', 119)
(2, '(') ('SHIFT', 111)
(2, '<factor>') 178
(2, '<atom>') 183
(2, '<expression>') 123
(2, 'ID') ('SHIFT', 3)
(2, '<expression>') 123
(2, '<factor>') 178
(2, '<atom>') 183
(2, '<conditional-expresssion>') 218
(2, 'ID') ('SHIFT', 3)
(2, 'ID') ('SHIFT', 3)
(2, '(') ('SHIFT', 111)
(2, '<condition>') 175
(2, 'true') ('SHIFT', 121)
(3, '-') ('REDUCE', <atom> -> ID)
(3, '*') ('REDUCE', <atom> -> ID)
(3, '>') ('REDUCE', <atom> -> ID)
(3, '<') ('REDUCE', <atom> -> ID)
(3, '>=') ('REDUCE', <atom> -> ID)
(3, '/') ('REDUCE', <atom> -> ID)
(3, '=<') ('REDUCE', <atom> -> ID)
(3, '==') ('REDUCE', <atom> -> ID)
(3, '!=') ('REDUCE', <atom> -> ID)
(3, '+') ('REDUCE', <atom> -> ID)
(3, '(') ('SHIFT', 4)
(3, '(') ('SHIFT', 4)
(4, '<factor>') 17
(4, 'ID') ('SHIFT', 5)
(4, 'ID') ('SHIFT', 5)
(4, '<var-attr>') 37
(4, '<atom>') 22
(4, '<function-call>') 34
(4, 'ID') ('SHIFT', 5)
(4, '<var-method>') 38
(4, '<string-atom>') 29
(4, '<string-atom>') 29
(4, '<factor>') 17
(4, 'ID') ('SHIFT', 5)
(4, '<function-call>') 34
(4, '(') ('SHIFT', 8)
(4, ')') ('SHIFT', 107)
(4, '<expression>') 15
(4, '<aritmetic-operation>') 16
(4, 'number') ('SHIFT', 7)
(4, '(') ('SHIFT', 8)
(4, 'string') ('SHIFT', 12)
(4, '<string-operation>') 28
(4, '<atom>') 22
(4, 'ID') ('SHIFT', 5)
(4, '<factor>') 17
(4, '<param>') 13
(4, 'ID') ('SHIFT', 5)
(4, 'ID') ('SHIFT', 5)
(4, '<param-list>') 108
(4, '<param>') 13
(4, '<atom>') 22
(5, '.') ('SHIFT', 39)
(5, '(') ('SHIFT', 6)
(5, '@') ('REDUCE', <string-atom> -> ID)
(5, ')') ('REDUCE', <string-atom> -> ID)
(5, ',') ('REDUCE', <string-atom> -> ID)
(5, '.') ('SHIFT', 39)
(5, '(') ('SHIFT', 6)
(5, '-') ('REDUCE', <atom> -> ID)
(5, '*') ('REDUCE', <atom> -> ID)
(5, '/') ('REDUCE', <atom> -> ID)
(5, ',') ('REDUCE', <atom> -> ID)
